@using miltonProject.Client.Interfaces
@using miltonProject.Client.Models
@inject Blazored.SessionStorage.ISessionStorageService _storage
@inject IBillingRepository _billrepo
@inject NavigationManager _nav


<MudDialogProvider FullWidth="true"
                   MaxWidth="MaxWidth.Small"
                   CloseButton="true"
                   DisableBackdropClick="true"
                   NoHeader="true"
                   Position="DialogPosition.Center" />


<MudDialog @bind-IsVisible="Visible">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3" /> Számla elfogadása <b> @UsersFullName </b> részére
        </MudText>
    </TitleContent>
    <DialogContent>
        Számla elfogadásának megerősítése
        (A művelet nem visszavonható!)
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Submit" Class="px-10">Megerősít</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => ClosePopUp.InvokeAsync(false))" Class="px-10">Mégsem</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [Parameter]
    public bool Visible { get; set; }
    [Parameter]
    public string UsersFullName { get; set; }
    [Parameter]
    public int BillId { get; set; }
    [Parameter]
    public EventCallback<bool> ClosePopUp { get; set; }

    BillingRequest billreq = new();
    List<BillingRequest> billreqs = new();

    protected override async Task OnParametersSetAsync()
    {
        billreqs = await _billrepo.GetBills();
        billreq = billreqs?.Where(w => w.Id == BillId).FirstOrDefault();
        if (billreq != null)
        {
            billreq.IsAccepted = true;
            billreq.UpdateDate = DateTime.Now;
        }
    }
    async Task Submit()
    {
        await _billrepo.UploadRequest(billreq);
        await ClosePopUp.InvokeAsync(false);
        _nav.NavigateTo("/checkbills", forceLoad: true);

    }
}